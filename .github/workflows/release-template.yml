name: Release Template

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

env:
  NUGET_REPO_URL: "https://api.nuget.org/v3/index.json"

jobs:
  CLI:
    name: ðŸšš Prepare new release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'
      - name: Sets environment variables - branch-name
        uses: nelonoel/branch-name@v1.0.1
      - name: Sets environment variables - Nerdbank.GitVersioning
        uses: dotnet/nbgv@master
        with:
          setAllVars: true
      - name: Build
        run: dotnet build -c Release CurlGenerator.sln -p:UseSourceLink=true -p:PackageVersion="${{ inputs.version }}" -p:Version="${{ inputs.version }}"
      - name: Move packages
        shell: pwsh
        run: Get-ChildItem -Filter *.nupkg -Recurse | ForEach-Object { Move-Item -Path $_ -Destination . }
      - name: Publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Packages
          path: |
            **/*.nupkg
            README.md
      - name: Authenticate to NuGet with Trusted Publishing
        id: nuget-login
        uses: NuGet/login@v1
        with:
          # This step uses GitHub OIDC to obtain a short-lived API key (valid for 1 hour)
          # Trusted Publishing must be configured in your NuGet.org account settings:
          # https://www.nuget.org/account/apikeys -> Trusted Publishing section
          # Specify: owner (christianhelle), repository (curlgenerator), and workflow file (release-template.yml)
          user: christian.helle
      - name: Push packages to NuGet
        run: dotnet nuget push **/*.nupkg --api-key ${{ steps.nuget-login.outputs.NUGET_API_KEY }} --source ${{ env.NUGET_REPO_URL }} --no-symbols
      - name: Create tag
        uses: actions/github-script@v8
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ inputs.version }}",
              sha: context.sha
            })
